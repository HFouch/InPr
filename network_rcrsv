import networkx as nx
import matplotlib.pyplot as plt


import copy

class Node:

    def __init__(self, state=None, parent=None):
        self.state = state
        self.parent = parent
        self.parent_operation = None

        self.h = 0
        self.g = 0
        self.f = 0

    def get_legal_operations(self, adjacenciesB ):
        list_of_legal_operations = []
        adjacenciesA = self.state
        adjacenciesB = adjacenciesB

        for element in adjacenciesB:
            adjacenciesA_copy = copy.deepcopy(adjacenciesA)

            #if element is an adjacency:
            if type(element) is tuple:
                p = element[0]
                q = element[1]
                u=0
                v=0

                #if elements containing p and q respectively in a are adjacencies
                for marker in adjacenciesA_copy:
                    if type(marker) is tuple:
                        if marker[0] == p or marker[1] == p:
                            u = marker

                        if marker[0] == q or marker[1] == q:
                            v = marker


                # element containing p in A is a telomere
                if u == 0:
                    u = p
                # element containing q in A is a telomere
                if v == 0:
                    v = q


                if u != v:
                    adjacenciesA_copy.append((p,q))
                    adjacenciesA_copy.remove(u)
                    adjacenciesA_copy.remove(v)

                    # if u is an adjacency:
                    if type(u) is tuple:
                        # calcultate u'p
                        if u[0] == p:
                            u_not_p = u[1]
                        else:
                            u_not_p = u[0]

                        # if v is an adjacency:
                        if type(v) is tuple:
                            # calcultate v'q
                            if v[0] == q:
                                v_not_q = v[1]
                            else:
                                v_not_q = v[0]

                            adjacenciesA_copy.append((u_not_p, v_not_q))
                            operation = ((u, v), ((p, q), (u_not_p, v_not_q)))
                            list_of_legal_operations.append((operation))


                        # else v is a telomere
                        else:
                            adjacenciesA_copy.append(u_not_p)
                            operation = ((u, v), ((p, q), (u_not_p)))
                            list_of_legal_operations.append((operation))


                   #else u is a telomere
                    else:
                        # if v is an adjacency
                        if type(v) is tuple:
                            #calculate v'q
                            if v[0] == q:
                                v_not_q = v[1]
                            else:
                                v_not_q = v[0]
                            adjacenciesA_copy.append(v_not_q)
                            operation = ((v,u),((p,q),(v_not_q)))
                            list_of_legal_operations.append(operation)

                        #e;se v is a telomere
                        else:
                            operation = (u,v,((p,q)))
                            list_of_legal_operations.append(operation)

            #else if the element is a telomere
            elif type(element) is str:
                u = 0
                p = element

                for marker in adjacenciesA_copy:
                    if type(marker) is tuple:
                        if marker[0] == p or marker[1] == p:
                            u = marker

                if u == 0 :
                    u=p

                #if u is not a telomere:
                if u != p:
                    adjacenciesA_copy.append(u[0])
                    adjacenciesA_copy.append(u[1])
                    adjacenciesA_copy.remove(u)
                    operation = ((u), (u[0]), (u[1]))
                    list_of_legal_operations.append(operation)

        return list_of_legal_operations

    def take_action(self, operation):

        state_copy = copy.deepcopy(self.state)

        #if it is a fusion or fission:
        if len(operation) == 3:

            #fission
            if type(operation[0]) is tuple:
                state_copy.remove(operation[0])
                state_copy.append(operation[1])
                state_copy.append(operation[2])

            #fusion
            else:
                state_copy.remove(operation[0])
                state_copy.remove(operation[1])

                #ensure gene extremities in correct order for downstream comparisions with genome B extremities
                if operation[2][0][0] < operation[2][1][0]:
                    state_copy.append(operation[2])
                else:
                    state_copy.append((operation[2][1], operation[2][0]))

        #else it is another rearrangment
        elif len(operation) == 2:
            #transpositions, balanced translcations and block interchanges:
            if type(operation[0]) is tuple and type(operation[-1]) is tuple:
                state_copy.remove(operation[0][0])
                state_copy.remove(operation[0][1])

                # ensure gene extremities in correct order for downstream comparisions with genome B extremities
                if operation[1][0][0][0] < operation[1][0][1][0]:
                    state_copy.append(operation[1][0])
                else:
                    state_copy.append((operation[1][0][1], operation[1][0][0]))


                if operation[1][1][0][0] < operation[1][1][1][0]:
                    state_copy.append(operation[1][1])
                else:
                    state_copy.append((operation[1][1][1], operation[1][1][0]))



            #unbalanced translocations
            elif type(operation[0]) is tuple and type(operation[-1]) is str:
                state_copy.remove(operation[0][0])
                state_copy.remove(operation[0][1])

                # ensure gene extremities in correct order for downstream comparisions with genome B extremities
                if operation[1][0][0][0] < operation[1][0][1][0]:
                    state_copy.append(operation[1][0])
                else:
                    state_copy.append((operation[1][0][1], operation[1][0][0]))

                state_copy.append(operation[1][1])


        else:
            #RAISE AN ERROR
            print("YOU'VE GOT A PROBLEM DARLING")

        return state_copy

    def get_heuristic(self, adjacenciesB):
        adjacenciesA = self.state
        adjacenciesB = adjacenciesB

        counter = 0
        for adj in adjacenciesB:
            if adj not in adjacenciesA:
                counter+=1

        heuristic = counter/2
        return heuristic

    def is_equivalent(self, adjacenciesB):
        adjacenciesA = copy.deepcopy(self.state)
        adjacenciesB = adjacenciesB

        ordered_adjacenciesA = []
        for element in adjacenciesA:
            if type(element) is tuple:
                if int(element[0][:-1]) < int(element[1][:-1]):
                    ordered_adjacenciesA.append(element)
                else:
                    ordered_adjacenciesA.append((element[1], element[0]))
            else:
                ordered_adjacenciesA.append(element)

        for element in adjacenciesB:
            if element in ordered_adjacenciesA:
                pass
            else:
                return False

        return True



def gene_extremities(genome):
    genome_gene_ext = []
    for chromosome in genome:
        chromosome_gene_ext = []
        for marker in chromosome:
            if int(marker) >= 0:
                marker_str = str(marker)
                chromosome_gene_ext.append(marker_str + 't')
                chromosome_gene_ext.append(marker_str + 'h')
            else:
                marker_str = str(abs(marker))
                chromosome_gene_ext.append(marker_str + 'h')
                chromosome_gene_ext.append(marker_str + 't')
        genome_gene_ext.append(chromosome_gene_ext)

    return genome_gene_ext

def create_adjacency_list(gene_extremities):
    adjacencies = []
    for chromosome in gene_extremities:
        i=0
        while i < len(chromosome):
            if chromosome[i] == chromosome[0] or chromosome[i] == chromosome[-1]:
                adjacencies.append((chromosome[i]))
                i +=1
            else:
                adjacencies.append((chromosome[i], chromosome[i+1]))
                i += 2
    return adjacencies

genomeA = [[1,2,5,6,-4,-3,7,8]]
genomeB = [[1,2,3,4,5,6, 7, 8]]

adjacencies_genomeA = create_adjacency_list(gene_extremities(genomeA))
#adjacencies_genomeA = a
adjacencies_genomeB = create_adjacency_list(gene_extremities(genomeB))

start_node = Node(adjacencies_genomeA)

def recursive_node_generation(current_node, end_state, node_list, edge_list, level=0):
    operations = current_node.get_legal_operations(end_state)
    print('operations: ', operations)

    if len(operations) != 0:
        operations.append('catch')
        print('operations: ', operations)

    if current_node.is_equivalent(end_state):
        print('current node is equivalent')
        print('level: ', level)
        level -= 1
        print('level: ', level)
        pass

    else:
        print('current node is not equivalent')
        print('level: ', level)
        level += 1
        print('level: ', level)

        for i in range(len(operations)):
            current_operation = operations[i]
            print('current operation: ', current_operation)

            if current_operation == 'catch':
                print('caught')
                if level == 1:
                    print('returning...')
                    return node_list, edge_list

                else:
                    print('level: ', level)
                    level -= 1
                    print('level: ', level)
                    pass
            else:
                new_state = current_node.take_action(current_operation)
                new_node = Node(new_state, current_node)
                node_list.append((level, new_node))
                edge_list.append((current_node, new_node, current_operation))
                recursive_node_generation(new_node, end_state, node_list,edge_list, level)







def main():
    #try these genomes to see what happens to graph when there are too many possibilities
    #genomeA = [[1, 2, 5, 6, -4, -3, 7, 8], [9,10,12,11,13]]
    #genomeB = [[1, 2, 3, 4, 5, 6, 7, 8,9,10,11,12,13]]

    genomeA = [[1, 2, 5, 6, -4, -3, 7, 8]]
    genomeB = [[1, 2, 3, 4, 5, 6, 7, 8]]



    adjacencies_genomeA = create_adjacency_list(gene_extremities(genomeA))

    adjacencies_genomeB = create_adjacency_list(gene_extremities(genomeB))

    current_node = Node(adjacencies_genomeA)
    node_list=[]
    node_list.append((0, current_node))
    edge_list=[]
    nodes_and_edges = recursive_node_generation(current_node, adjacencies_genomeB,node_list, edge_list )
    nodes = nodes_and_edges[0]
    print()
    edges = nodes_and_edges[1]
    for node in nodes:
        print(node)
    print()
    for edge in edges:
        print(edge)


    G = nx.DiGraph()
    #find max level nodes reach:
    levels = [x for x,y in nodes]
    max_level = max(levels)

    #add nodes to graph per level:
    counter=0
    for i in range(0, max_level+1):
        nodes_on_level = [node[1] for node in nodes if node[0]==i]
        number_of_nodes_on_level = len(nodes_on_level)

        width_to_next_node = 3/number_of_nodes_on_level
        for j in range(1, len(nodes_on_level)+1):
            node_name = nodes_on_level[j-1]
            G.add_node(node_name, pos=((width_to_next_node*j),-i))
            counter+=1

    print()
    print(G.nodes)


    for edge in edges:
        print(edge)
        print()
        G.add_edge(edge[0], edge[1], weight=1, title=edge[2], subtitle='1')
    edge_labels = nx.get_edge_attributes(G, 'title')
    # print(edge_labels)

    fig = plt.figure()
    ax1 = plt.subplot2grid((1, 1), (0, 0))
    pos = nx.get_node_attributes(G, 'pos')
    nx.draw(G, pos)

    #nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
    plt.savefig('my_network.png')



if __name__ == '__main__':
    main()
