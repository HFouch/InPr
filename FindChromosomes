
from Class_extremities_and_adjacencies import Extremities_and_adjacencies

genomeA = [[1,-3,-2, 4, 5,6,9,7], [8, 10]]
genomeB = [[1, 2,3 ,4 , 5, 6, 7], [8, 9, 10]]

#from genes to adjacencies
get_adjacencies = Extremities_and_adjacencies()
adjacencies_genomeA = get_adjacencies.adjacencies_ordered_and_sorted(genomeA)
#adjacencies_genomeB = get_adjacencies.adjacencies_ordered_and_sorted(genomeB)
adjacencies_genomeB =[1, 4.5, 8, 9.5, 12, 12.5, (1.5, 2),(2.5, 3), (3.5, 4), (5, 7.5), (5.5, 6), (6.5, 7), (8.5, 9), (10, 11.5), (11, 10.5), (13, 13.5)]
print('Adjacencies of the genomes: ')
print('Genome A: ', adjacencies_genomeA)
print('Genome B: ', adjacencies_genomeB)
print('____________________________________')
print()
print()



def find_next_extremity(current, next_extremity):
    if current[0] == next_extremity:
        if current[1] % 1 == 0:
            next= current[1] + 0.5
        else:
            next = current[1] - 0.5
    else:
        if current[0] % 1 == 0:
            next = current[0] + 0.5
        else:
            next = current[0] - 0.5
    return next

def find_next_adjacency(next_extremity, chromosome, not_telomeres):
    for element in not_telomeres:
        if element[0] == next_extremity or element[1] == next_extremity:
            current = element
            chromosome.append(current)
            not_telomeres.remove(current)
            next_extremity = find_next_extremity(current, next_extremity)
            return next_extremity, chromosome, not_telomeres
    return [next_extremity]


def find_adjacency_cycle(next_extremity, chromosome, not_telomeres):
    print('adj cycle, ex: ', next_extremity)

    next_adjacency = find_next_adjacency(next_extremity, chromosome, not_telomeres)

    while len(next_adjacency) != 1:
        print(next_adjacency)
        next_extremity = next_adjacency[0]
        next_adjacency = find_next_adjacency(next_extremity, chromosome, not_telomeres)


    else:
        next_extremity = next_adjacency[0]

        return next_extremity, chromosome, not_telomeres

def find_chromosomes(adjacencies):
    telomeres = [element for element in adjacencies if type(element) is not tuple]
    not_telomeres = [element for element in adjacencies if type(element) is tuple]
    print(telomeres)
    print(not_telomeres)
    linear_chromosomes = []
    circular_chromosomes = []
    chromosome = []
    i = 0

    #find linear chromosomes
    while len(telomeres) > 0:
        print(i)
        i += 1
        current = telomeres[0]

        telomeres.remove(current)
        chromosome.append(current)

        if current % 1 == 0:
            next_extremity = current + 0.5
        else:
            next_extremity = current - 0.5

        # if single gene chromosome
        if next_extremity in telomeres:
            current = next_extremity

            telomeres.remove(current)
            chromosome.append(current)
            linear_chromosomes.append(chromosome)
            chromosome = []

        #else find adjacency cycle
        else:
            adjacency_cycle = find_adjacency_cycle(next_extremity, chromosome, not_telomeres)
            next_extremity = adjacency_cycle[0]

            if next_extremity in telomeres:
                current = next_extremity
                telomeres.remove(current)
                chromosome.append(current)
                linear_chromosomes.append(chromosome)
                chromosome= []


    #find circular chromosomes
    while len(not_telomeres) > 0:
        current = not_telomeres[0]
        not_telomeres.remove(current)
        chromosome.append(current)

        #find next extremity:
        if current[0] % 1 == 0:
            next_extremity = current[0] + 0.5
        else:
            next_extremity = current[0] - 0.5

        # if it is a single gene chromosome:
        if next_extremity == current[1]:
            print('yes')
            circular_chromosomes.append(chromosome)
            chromosome = []

        #go find adjacency cycle
        else:
            adjacency_cycle = find_adjacency_cycle(next_extremity, chromosome, not_telomeres)
            next_extremity = adjacency_cycle[0]

            #if at end of circular chromosome
            if next_extremity == chromosome[0][1]:
                circular_chromosomes.append(chromosome)
                chromosome = []


    return linear_chromosomes, circular_chromosomes

chromosomes = find_chromosomes(adjacencies_genomeB)

print('linear chromosomes:')
for element in chromosomes[0]:
    print(element)
print()
print('circular chromosomes: ')
for element in chromosomes[1]:
    print(element)
